buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // classpath 'de.aaschmid.gradle.plugins:gradle-cpd-plugin:1.0'
        classpath 'de.aaschmid:gradle-cpd-plugin:1.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.7.1'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'cpd'
apply plugin: 'com.github.kt3k.coveralls'

allprojects {
    apply plugin: 'jacoco'
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'net.sourceforge.pmd:pmd:5.8.1'
}

cpd {
    language = 'java'
    toolVersion = '5.8.1'
    encoding = 'UTF-8'
}

tasks.cpdCheck {
    minimumTokenCount = 50
    ignoreFailures = true

    def reportName = temporaryDir.getAbsolutePath() + '/cpd.xml'
    reports {
        xml.enabled = true
        xml.destination = reportName
    }

    doFirst {
        println '*****************************************************'
        println '**************** Copy/paste analysis ****************'
        println '*****************************************************'

        def root = allprojects.toArray()[0]
        def fileTree = fileTree(root.getProjectDir())
        fileTree.include "**/*.java"
        source = fileTree.filter{ !it.path.contains('korniakov-kirill') }
        //println "source: " + source.getFiles()
    }

    doLast {
        def copyPasted = new XmlParser().parse(reportName)
        def rate = copyPasted.duplication.size()
        println '*****************************************************'
        println '   Copy/paste rate: '  + rate + ' times'
        println '*****************************************************'

        copyPasted.duplication.each {
            d -> println '[**************** Found in: ****************]'
            d.file.each {
                f -> println f.'@path' + ':' + f.'@line'
            }
            println d.codefragment.text()
        }

        if (rate == 0) {
            println '*****************************************************'
            println '   Well done, no copy-paste detected!                '
            println '*****************************************************'
        } else {
            println '*****************************************************'
            println '   FAIL: copy-paste detected!                        '
            println '   Report: ' + reportName
            println '*****************************************************'

            throw new RuntimeException("Cannot proceed with non zero copy-paste rate!")
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'

    repositories {
       mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.11'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        options.compilerArgs << "-Werror"
    }

    test {
        setMaxParallelForks Runtime.runtime.availableProcessors()
        afterTest { desc, result ->
                String suiteName = desc.className.substring(desc.className.lastIndexOf('.') + 1)
                println "[${suiteName}]: ${result.resultType} in ${desc.name}"
        }
    }

    checkstyle {
        toolVersion = '7.2'
        checkstyleMain.configFile = new File(rootDir.getAbsolutePath() + "/config/checkstyle/", "main.xml")
        checkstyleTest.configFile = new File(rootDir.getAbsolutePath() + "/config/checkstyle/", "test.xml")
    }

    pmd {
        pmdMain.ruleSetFiles = files(rootDir.getAbsolutePath() + "/config/pmd/rules.xml")
        pmdTest.ruleSets = [ "java-basic", "java-braces" ]
    }

    gradle.taskGraph.beforeTask { Task task ->
        if (task.name == 'jfxDeploy') {
            task.enabled = false
        }
    }

    gradle.taskGraph.afterTask { Task task, TaskState state ->
        if ((task.name == 'pmdMain' || task.name == 'pmdTest') && state.failure) {
            def outFile = task.name == 'pmdMain' ? 'main.xml' : 'test.xml'
            def reportFile = file("${buildDir}/reports/pmd/${outFile}")
            if (reportFile.exists()) {
                def result = new XmlParser().parse(reportFile)
                result.file.each { file ->
                    file.violation.each { violation ->
                        println "${file.'@name'}:${violation.'@beginline'}: ${violation.text()}"
                    }
                }
                reportFile.delete()
            }
        } else if (task.name == 'jacocoTestReport'
                        && state.getExecuted() && state.getSkipped()
                        && task.getProject().getName() != 'agile-course-practice') {
            println '[**************** \\(°□°)/ ****************]'
            throw new RuntimeException("Cannot proceed w/o test report!")
        } else if (task.name == 'jacocoRootReport' && state.failure) {
            println '[**************** \\(°□°)/ ****************]'
            throw new RuntimeException("Cannot proceed w/o test report!")
        }
    }

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                                        'ru/unn/agile/*/view/*'
                                       ]
            )
        })
    }
}
